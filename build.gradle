plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

var mcVersion = stonecutter.current.version
version =  property("mod.version") + "+" + mcVersion
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.imb11.dev/releases' }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url 'https://maven.terraformersmc.com/releases' }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric')}"

    include modImplementation("dev.isxander:yet-another-config-lib:${property('deps.yacl')}") {
        // Remove any fabric API modules.
        exclude group: "net.fabricmc.fabric-api", module: "fabric-api"
    }

    modImplementation ("com.mineblock11:MRU:${property('deps.mru')}")

    modRuntimeOnly modCompileOnly("com.terraformersmc:modmenu:${property('deps.modmenu')}")
}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

loom {
    runs {
        datagenClient {
            client()
            name "Data Generation Client"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=" + getRootDir().toPath().resolve("src/main/generated")
            vmArg "-Dfabric-api.datagen.modid=snowundertrees"

            ideConfigGenerated = false
            runDir "build/datagen"
        }
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_version': project.version,
                'target_minecraft': project.property('mod.target'),
                'target_mru': project.property('deps.mru'),
                'target_fabricloader': project.property('deps.fabric_loader')
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    rootProject.file('src/main/generated')
            ]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    var version = (mcVersion > "1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}